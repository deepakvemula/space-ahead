---
import type { Listing } from "../utils/listings";
import { formatPriceRange, parseImageUrls } from "../utils/listings";
import { withBase } from "../utils/helpers";
import PropertyImage from "./PropertyImage.astro";

interface Props {
  listing: Listing;
}

const { listing } = Astro.props;
const priceRange = formatPriceRange(
  listing.Base_Price_Min_Lakhs,
  listing.Base_Price_Max_Lakhs
);
const imageUrls = parseImageUrls(listing.Gallery_Image_URLs);
const firstImage = imageUrls[0] || "placeholder.jpg";

// Map listing status to theme-aligned badge styles
const normalizedStatus = (listing.Project_Status || "").toLowerCase().trim();
const statusStyles: Record<string, string> = {
  "under construction":
    "border-space-yellow text-space-stone bg-space-yellow/50 dark:text-space-yellow dark:border-space-yellow dark:bg-transparent",
  "ready to move":
    "border-space-red text-space-red bg-space-red/30 dark:border-space-yellow dark:text-space-yellow dark:bg-transparent",
  "new launch":
    "border-space-stone text-space-stone bg-space-sand/70 dark:border-whitesmoke dark:text-whitesmoke dark:bg-transparent",
  "sold out":
    "border-gray-500 text-gray-800 bg-gray-200 dark:border-gray-500 dark:text-gray-400 dark:bg-transparent",
};
const badgeClass =
  statusStyles[normalizedStatus] ||
  "border-gray-400/60 text-gray-700 dark:text-gray-200 dark:border-gray-500/60";
---

<article
  class="listing-card group rounded-2xl overflow-hidden shadow-sm hover:shadow-2xl transition-all duration-300 bg-white dark:bg-gray-800/70 border border-gray-200 dark:border-gray-700 h-full flex flex-col"
>
  <a href={withBase(`/listings/${listing.Page_Slug}`)} class="flex flex-col h-full">
    <!-- Image Container -->
    <div class="relative aspect-video overflow-hidden bg-gray-100 dark:bg-gray-700">
      <PropertyImage
        src={firstImage}
        alt={listing.Project_Name}
        class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
        width={600}
        height={400}
        loading="lazy"
      />
      {
        listing.Project_Status && (
          <div class="absolute top-3 right-3">
            <span
              class={`tag rounded-full text-xs px-3 py-1.5 border shadow-md backdrop-blur-sm kanit-light font-semibold ${badgeClass}`}
            >
              {listing.Project_Status}
            </span>
          </div>
        )
      }
    </div>

    <!-- Content Container -->
    <div class="flex flex-col flex-1 p-4 sm:p-5">
      <!-- Title -->
      <h3
        class="text-lg sm:text-xl font-bold line-clamp-2 text-gray-900 dark:text-white mb-3 leading-tight"
      >
        {listing.Project_Name}
      </h3>

      <!-- Location -->
      {
        listing.Location_Area && (
          <div class="flex items-start gap-2 mb-2.5">
            <span class="text-base mt-0.5 flex-shrink-0">üìç</span>
            <p class="text-sm sm:text-base text-gray-600 dark:text-gray-300 line-clamp-1 leading-relaxed">
              {listing.Location_Area}
            </p>
          </div>
        )
      }

      <!-- Developer -->
      {
        listing.Developer_Name && (
          <p class="text-sm text-gray-500 dark:text-gray-400 mb-3">
            by{" "}
            <span class="font-semibold text-gray-700 dark:text-gray-200">
              {listing.Developer_Name}
            </span>
          </p>
        )
      }

      <!-- Divider -->
      {
        (listing.Unit_Configurations ||
          (listing.Min_Size_Sqft && listing.Max_Size_Sqft)) && (
          <div class="border-t border-gray-200 dark:border-gray-700 pt-3 mb-3" />
        )
      }

      <!-- Configurations & Size -->
      {
        (listing.Unit_Configurations ||
          (listing.Min_Size_Sqft && listing.Max_Size_Sqft)) && (
          <div class="space-y-2 mb-4">
            {listing.Unit_Configurations && (
              <div class="flex items-center gap-2">
                <span class="text-gray-600 dark:text-gray-300 font-semibold text-sm sm:text-base">
                  {listing.Unit_Configurations}
                </span>
              </div>
            )}
            {listing.Min_Size_Sqft && listing.Max_Size_Sqft && (
              <div class="text-sm text-gray-500 dark:text-gray-400">
                {listing.Min_Size_Sqft} - {listing.Max_Size_Sqft} sq.ft
              </div>
            )}
          </div>
        )
      }

      <!-- Price Section - Pushed to bottom -->
      {
        (priceRange || listing.Price_Per_Sqft) && (
          <div class="mt-auto pt-3 border-t border-gray-200 dark:border-gray-700">
            <div class="flex items-end justify-between gap-3">
              {priceRange && (
                <div class="flex flex-col">
                  <span class="text-xs text-gray-500 dark:text-gray-400 mb-1">
                    Starting from
                  </span>
                  <p class="text-lg sm:text-xl font-bold text-space-red dark:text-space-yellow">
                    {priceRange}
                  </p>
                </div>
              )}
              {listing.Price_Per_Sqft && (
                <div class="text-right">
                  <div class="text-xs text-gray-500 dark:text-gray-400 mb-1">
                    per sq.ft
                  </div>
                  <div class="text-sm sm:text-base font-semibold text-gray-700 dark:text-gray-200">
                    ‚Çπ{listing.Price_Per_Sqft}
                  </div>
                </div>
              )}
            </div>
          </div>
        )
      }
    </div>
  </a>
</article>

<style>
  .listing-card {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .listing-card:hover {
    transform: translateY(-8px);
  }

  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Ensure consistent card heights */
  .listing-card {
    height: 100%;
  }
</style>
